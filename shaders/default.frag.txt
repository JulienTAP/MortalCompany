#version 330 core

// Inputs from Vertex Shader
in vec3 crntPos;   // World position
in vec3 Normal;    // Transformed normal
in vec2 texCoord;
in vec3 vertColor; // Vertex color (passed through)

// Output color
out vec4 FragColor;

// Uniforms
uniform sampler2D tex0;
uniform vec4 lightColor;
uniform vec3 lightPos;
uniform vec3 camPos;     // Camera position in world space

void main()
{
	// Texture color
	vec4 textureColor = texture(tex0, texCoord);

	// Normalize the incoming Normal vector.
	vec3 norm = normalize(Normal);
    // vec3 correctedNorm = -norm; // Reverted for now, using raw 'norm'
    vec3 correctedNorm = norm;

	// Ambient lighting - INCREASED for visibility
	float ambientStrength = 0.5f; // Increased significantly
	vec3 ambient = ambientStrength * lightColor.rgb * textureColor.rgb;

	// Diffuse lighting
    // Light direction from surface point to light source
	vec3 lightDir = normalize(lightPos - crntPos);
    // Calculate diffuse intensity using the (currently un-flipped) normal
	float diffuseFactor = max(dot(correctedNorm, lightDir), 0.0f);
	vec3 diffuse = diffuseFactor * lightColor.rgb * textureColor.rgb;

	// Specular lighting (kept for now, but diffuse is key for this test)
	float specularStrength = 0.50f;
    // View direction from surface point to camera
	vec3 viewDir = normalize(camPos - crntPos);
    // Incident light vector (from light source towards surface point)
    vec3 incidentLightDir = -lightDir;
    // Reflection direction, using the (currently un-flipped) normal
	vec3 reflectDir = reflect(incidentLightDir, correctedNorm);
    // Shininess factor
    float shininess = 32.0f;
	float spec = pow(max(dot(viewDir, reflectDir), 0.0f), shininess);
	vec3 specular = specularStrength * spec * lightColor.rgb;

    // Final color: Focus on diffuse and ambient for diagnosis
	vec3 lighting = ambient + diffuse + specular; // Original full lighting
	// vec3 lighting = ambient + diffuse; // Option 1: Remove specular to focus on diffuse
    // vec3 lighting = vec3(diffuseFactor); // Option 2: Visualize only the diffuse factor (grayscale)

	FragColor = vec4(lighting, textureColor.a);
    // FragColor = vec4(clamp(lighting, 0.0, 1.0), textureColor.a); // Optional clamping
}
