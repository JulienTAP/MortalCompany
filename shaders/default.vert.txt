#version 330 core

// Attributes
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aColor; // Vertex color
layout (location = 2) in vec2 aTex;   // Texture Coordinates
layout (location = 3) in vec3 aNormal;// Vertex normal

// Outputs to Fragment Shader
out vec3 crntPos; // World position
out vec3 Normal;  // Transformed normal
out vec2 texCoord;
out vec3 vertColor; // Pass vertex color through

// Uniforms
uniform mat4 model;     // Model (world) matrix
uniform mat4 camMatrix; // View-Projection matrix

void main()
{
	// Calculate world position of the vertex
	vec4 worldPosVec4 = model * vec4(aPos, 1.0);
	crntPos = worldPosVec4.xyz;

	// Calculate screen position
	gl_Position = camMatrix * worldPosVec4;

	// Pass texture coordinates
	texCoord = aTex;

    // Pass vertex color
    vertColor = aColor;

	// Transform normal: should use the inverse transpose of the model matrix's 3x3 part
    // This correctly handles non-uniform scaling.
    // If no non-uniform scaling, mat3(model) * aNormal is often sufficient and faster.
	Normal = normalize(mat3(transpose(inverse(model))) * aNormal);
}
